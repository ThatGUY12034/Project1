@app.route("/addData1",methods=["POST","GET"])
def addData1():
    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            con=sqlite3.connect("database12.db")
            cur=con.cursor()
            cur.execute("INSERT INTO data(name,address)values(?,?)",(name,address))
            con.commit()
            flash("Record Added Successfully","success")
        except:
            flash("Error in Insert Operation","danger")
        finally:
            return redirect(url_for("catagory"))
            con.close()

@app.route("/catagory.html",methods=["POST","GET"])
def catagory():
 
    con=sqlite3.connect("database12.db")
    con.row_factory=sqlite3.Row
    cur=con.cursor()
    cur.execute("SELECT * FROM data")
    data=cur.fetchall()
    return render_template("catagory.html",data=data)
@app.route('/update_record1/<string:id>',methods=["POST","GET"])
def update_record1(id):
    con=sqlite3.connect("database12.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    cur.execute("SELECT * FROM data where pid=?",(id))
    data = cur.fetchone()
    con.close()

    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            con = sqlite3.connect("database12.db")
            cur = con.cursor()
            cur.execute("UPDATE data SET name=?,address=? where pid=?",(name,address,id))
            con.commit()
            flash("Update Successfully","success")
        except:
            flash("Error in Update Operation","danger")
        finally:
            return redirect(url_for("catagory"))
            con.close()
    return render_template('update_record.html',data=data)

@app.route('/delete_record1/<string:id>')
def delete_record1(id):
    try:
        con = sqlite3.connect("database12.db")
        cur = con.cursor()
        cur.execute("DELETE FROM data where pid=?",(id))
        con.commit()
        flash("Record Deleted Successfully","success")
    except:
        flash("Record Delete Failed","danger")
    finally:
        return redirect(url_for("catagory"))
        con.close()
    
@app.route("/addData2",methods=["POST","GET"])
def addData2():
    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            con=sqlite3.connect("database3.db")
            cur=con.cursor()
            cur.execute("INSERT INTO data(name,address)values(?,?)",(name,address))
            con.commit()
            flash("Record Added Successfully","success")
        except:
            flash("Error in Insert Operation","danger")
        finally:
            return redirect(url_for("warehouse"))
            con.close()

	
@app.route('/update_record2/<string:id>',methods=["POST","GET"])
def update_record2(id):
    con=sqlite3.connect("database3.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    cur.execute("SELECT * FROM data where pid=?",(id))
    data = cur.fetchone()
    con.close()

    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            con = sqlite3.connect("database3.db")
            cur = con.cursor()
            cur.execute("UPDATE data SET name=?,address=? where pid=?",(name,address,id))
            con.commit()
            flash("Update Successfully","success")
        except:
            flash("Error in Update Operation","danger")
        finally:
            return redirect(url_for("warehouse"))
            con.close()
    return render_template('update_record.html',data=data)

@app.route('/delete_record2/<string:id>')
def delete_record2(id):
    try:
        con = sqlite3.connect("database3.db")
        cur = con.cursor()
        cur.execute("DELETE FROM data where pid=?",(id))
        con.commit()
        flash("Record Deleted Successfully","success")
    except:
        flash("Record Delete Failed","danger")
    finally:
        return redirect(url_for("warehouse"))
        con.close()


@app.route("/addData3",methods=["POST","GET"])
def addData3():
    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            con=sqlite3.connect("database4.db")
            cur=con.cursor()
            cur.execute("INSERT INTO data(name,address)values(?,?)",(name,address))
            con.commit()
            flash("Record Added Successfully","success")
        except:
            flash("Error in Insert Operation","danger")
        finally:
            return redirect(url_for("attributes"))
            con.close()

@app.route("/attributes.html",methods=["POST","GET"])
def attributes():
 
    con=sqlite3.connect("database4.db")
    con.row_factory=sqlite3.Row
    cur=con.cursor()
    cur.execute("SELECT * FROM data")
    data=cur.fetchall()
    return render_template("attributes.html",data=data)
@app.route('/update_record3/<string:id>',methods=["POST","GET"])
def update_record3(id):
    con=sqlite3.connect("database4.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    cur.execute("SELECT * FROM data where pid=?",(id))
    data = cur.fetchone()
    con.close()

    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            con = sqlite3.connect("database4.db")
            cur = con.cursor()
            cur.execute("UPDATE data SET name=?,address=? where pid=?",(name,address,id))
            con.commit()
            flash("Update Successfully","success")
        except:
            flash("Error in Update Operation","danger")
        finally:
            return redirect(url_for("attributes"))
            con.close()
    return render_template('update_record.html',data=data)

@app.route('/delete_record3/<string:id>')
def delete_record3(id):
    try:
        con = sqlite3.connect("database4.db")
        cur = con.cursor()
        cur.execute("DELETE FROM data where pid=?",(id))
        con.commit()
        flash("Record Deleted Successfully","success")
    except:
        flash("Record Delete Failed","danger")
    finally:
        return redirect(url_for("attributes"))
        con.close()

@app.route("/addData4",methods=["POST","GET"])
def addData4():
    if request.method=='POST':
        try:
            name=request.form['name']
            contact=request.form['contact']
            con=sqlite3.connect("database5.db")
            cur=con.cursor()
            cur.execute("INSERT INTO data(name,contact)values(?,?)",(name,contact))
            con.commit()
            flash("Record Added Successfully","success")
        except:
            flash("Error in Insert Operation","danger")
        finally:
            return redirect(url_for("add_record"))
            con.close()

@app.route("/add_record.html",methods=["POST","GET"])
def add_record():
 
    con=sqlite3.connect("database5.db")
    con.row_factory=sqlite3.Row
    cur=con.cursor()
    cur.execute("SELECT * FROM data")
    data=cur.fetchall()
    return render_template("add_record.html",data=data)
@app.route('/update_record4/<string:id>',methods=["POST","GET"])
def update_record4(id):
    con=sqlite3.connect("database5.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    cur.execute("SELECT * FROM data where pid=?",(id))
    data = cur.fetchone()
    con.close()

    if request.method=='POST':
        try:
            name=request.form['name']
            contact=request.form['contact']
            con = sqlite3.connect("database5.db")
            cur = con.cursor()
            cur.execute("UPDATE data SET name=?,contact=? where pid=?",(name,contact,id))
            con.commit()
            flash("Update Successfully","success")
        except:
            flash("Error in Update Operation","danger")
        finally:
            return redirect(url_for("add_record"))
            con.close()
    return render_template('update_record.html',data=data)

@app.route('/delete_record4/<string:id>')
def delete_record4(id):
    try:
        con = sqlite3.connect("database5.db")
        cur = con.cursor()
        cur.execute("DELETE FROM data where pid=?",(id))
        con.commit()
        flash("Record Deleted Successfully","success")
    except:
        flash("Record Delete Failed","danger")
    finally:
        return redirect(url_for("add_record"))
        con.close()

@app.route("/prouducts.html")
def prouducts():
    return render_template("prouducts.html")
@app.route("/addData5",methods=["POST","GET"])
def addData5():
    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            contact=request.form['contact']
            number=request.form['number']
            mail=request.form['mail']
            con=sqlite3.connect("database6.db")
            cur=con.cursor()
            cur.execute("INSERT INTO data(name,address,contact,number,mail)values(?,?,?,?,?)",(name,address,contact,number,mail))
            con.commit()
            flash("Record Added Successfully","success")
        except:
            flash("Error in Insert Operation","danger")
        finally:
            return redirect(url_for("prouducts"))
            con.close()


    
@app.route("/magproducts.html")
def magproducts():
    con=sqlite3.connect("database6.db")
    con.row_factory=sqlite3.Row
    cur=con.cursor()
    cur.execute("SELECT * FROM data")
    data=cur.fetchall()
    con.close()
    return render_template("magproducts.html",data=data)

@app.route('/update_record5/<string:id>',methods=["POST","GET"])
def update_record5(id):
    con=sqlite3.connect("database6.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    cur.execute("SELECT * FROM data where pid=?",(id))
    data = cur.fetchone()
    con.close()

    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            contact=request.form['contact']
            mail=request.form['mail']
            number=request.form['number']
            con = sqlite3.connect("database6.db")
            cur = con.cursor()
            cur.execute("UPDATE data SET name=?,address=?,contact=?,mail=?,number=? where pid=?",(name,address,contact,number,mail,id))
            con.commit()
            flash("Update Successfully","success")
        except:
            flash("Error in Update Operation","danger")
        finally:
            return redirect(url_for("magproducts"))
            con.close()
    return render_template('update_record12.html',data=data)

@app.route('/delete_record5/<string:id>')
def delete_record5(id):
    try:
        con = sqlite3.connect("database6.db")
        cur = con.cursor()
        cur.execute("DELETE FROM data where pid=?",(id))
        con.commit()
        flash("Record Deleted Successfully","success")
    except:
        flash("Record Delete Failed","danger")
    finally:
        return redirect(url_for("magproducts"))
        con.close()

@app.route("/order.html")
def order():
    return render_template("order.html")
    
@app.route("/addData6",methods=["POST","GET"])
def addData6():
    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            contact=request.form['contact']
            number=request.form['number']
            number1=request.form['number1']
            mail=request.form['mail']
            mail1=request.form['mail1']
            mail2=request.form['mail2']
            con=sqlite3.connect("database7.db")
            cur=con.cursor()
            cur.execute("INSERT INTO data(name,address,contact,number,number1,mail,mail1,mail2)values(?,?,?,?,?,?,?,?)",(name,address,contact,number,number1,mail,mail1,mail2))
            con.commit()
            flash("Record Added Successfully","success")
        except:
            flash("Error in Insert Operation","danger")
        finally:
            return redirect(url_for("magorder"))
            con.close()
@app.route("/magorder.html")
def magorder():
    con=sqlite3.connect("database7.db")
    con.row_factory=sqlite3.Row
    cur=con.cursor()
    cur.execute("SELECT * FROM data")
    data=cur.fetchall()
    con.close()
    return render_template("magorder.html",data=data)

@app.route('/update_record6/<string:id>',methods=["POST","GET"])
def update_record6(id):
    con=sqlite3.connect("database7.db")
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    cur.execute("SELECT * FROM data where pid=?",(id))
    data = cur.fetchone()
    con.close()

    if request.method=='POST':
        try:
            name=request.form['name']
            address=request.form['address']
            contact=request.form['contact']
            number=request.form['number']
            number1=request.form['number1']
            mail=request.form['mail']
            mail1=request.form['mail1']
            mail2=request.form['mail2']
            con = sqlite3.connect("database7.db")
            cur = con.cursor()
            cur.execute("UPDATE data SET name=?,address=?,contact=?,number=?,number1=?,mail=?,mail1=?,mail2=? where pid=?",(name,address,contact,number,number1,mail,mail1,mail2,id))
            con.commit()
            flash("Update Successfully","success")
        except:
            flash("Error in Update Operation","danger")
        finally:
            return redirect(url_for("magorder"))
            con.close()
    return render_template('update_record12.html',data=data)

@app.route('/delete_record6/<string:id>')
def delete_record6(id):
    try:
        con = sqlite3.connect("database7.db")
        cur = con.cursor()
        cur.execute("DELETE FROM data where pid=?",(id))
        con.commit()
        flash("Record Deleted Successfully","success")
    except:
        flash("Record Delete Failed","danger")
    finally:
        return redirect(url_for("magorder"))
        con.close()


order_users.html
@app.route("/mamber.html")
def mamber():
    return render_template("mamber.html")    

function GetPrint()
{
    /*For Print*/
    window.print();
}